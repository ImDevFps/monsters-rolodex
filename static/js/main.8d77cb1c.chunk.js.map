{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,YACnE,mCAAML,EAAMG,QAAQG,KAApB,OACA,mCAAMN,EAAMG,QAAQI,MAApB,WCFKC,G,MAAW,SAACR,GAAD,OACnB,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLdO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SACXa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCLG,E,kDAnCb,aAAc,IAAD,8BACX,gBAYFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAcF,EAAEG,OAAOC,SAZvC,EAAKC,MAAO,CACVb,SAAU,GACVU,YAAa,IAJJ,E,qDAOb,WAAoB,IAAD,OACjBI,MAAM,8CACNC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO3C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACF,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAgBe,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAWoB,W,GA9BTI,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8d77cb1c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"monster\" />\r\n        <h2> {props.monster.name} </h2>\r\n        <h3> {props.monster.email} </h3>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => (\r\n     <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n     </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className=\"search\"\r\n          type=\"search\" \r\n          placeholder={placeholder} \r\n          onChange={handleChange}\r\n        />\r\n)","import './App.css';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport { Component } from 'react';\n\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state ={\n      monsters: [],\n      searchField: '',\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n   .then( response => response.json())\n   .then( users => this.setState({ monsters: users }))\n  }\n\n  handleChange = e => {\n    this.setState({ searchField : e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1>MONSTERS ROLODEX</h1>\n      <SearchBox \n      placeholder='search monsters'\n      handleChange = {this.handleChange}\n      />\n      <CardList monsters={ filteredMonsters }/>\n    </div>\n    ) \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}